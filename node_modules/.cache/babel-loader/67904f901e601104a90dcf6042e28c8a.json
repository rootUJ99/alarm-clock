{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ujwal/Desktop/UJwal/projects/alram-clock/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nconst alramTicksArr = [...new Array(60)].map((it, index) => index + 1);\n\nconst App = () => {\n  _s();\n\n  const [currDateTime, setCurrDateTime] = useState(new Date());\n  const [alramDateTime, setAlramDateTime] = useState();\n  useEffect(() => {\n    const TimerId = setInterval(() => {\n      setCurrDateTime(new Date());\n\n      if (alramDateTime && currDateTime === alramDateTime) {\n        console.log('tick tick');\n      }\n    }, 1000);\n    return () => {\n      clearInterval(TimerId);\n    };\n  }, [currDateTime, alramDateTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [currDateTime.toLocaleTimeString(), alramDateTime && alramDateTime.toLocaleTimeString(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const date = new Date();\n        setAlramDateTime(new Date(date.setMinutes(date.getMinutes() + 2)));\n      },\n      children: \"SetAlram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      children: alramTicksArr.map(it => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: it,\n        children: it\n      }, it, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zg3YMb0lJFGMIG/Q0SLa5HnI5Ec=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ujwal/Desktop/UJwal/projects/alram-clock/src/App.js"],"names":["useEffect","useState","alramTicksArr","Array","map","it","index","App","currDateTime","setCurrDateTime","Date","alramDateTime","setAlramDateTime","TimerId","setInterval","console","log","clearInterval","toLocaleTimeString","date","setMinutes","getMinutes"],"mappings":";;;;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAO,WAAP;AAEA,MAAMC,aAAa,GAAG,CAAC,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAJ,EAAmBC,GAAnB,CAAuB,CAACC,EAAD,EAAKC,KAAL,KAAeA,KAAK,GAAG,CAA9C,CAAtB;;AAEA,MAAOC,GAAG,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAIS,IAAJ,EAAD,CAAhD;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,OAAO,GAAGC,WAAW,CAAC,MAAM;AAChCL,MAAAA,eAAe,CAAC,IAAIC,IAAJ,EAAD,CAAf;;AACA,UAAIC,aAAa,IAAIH,YAAY,KAAKG,aAAtC,EAAqD;AACnDI,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF,KAL0B,EAKxB,IALwB,CAA3B;AAOA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACJ,OAAD,CAAb;AACD,KAFD;AAGD,GAXQ,EAWP,CAACL,YAAD,EAAeG,aAAf,CAXO,CAAT;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGH,YAAY,CAACU,kBAAb,EADH,EAEGP,aAAa,IAAIA,aAAa,CAACO,kBAAd,EAFpB,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAI;AACnB,cAAMC,IAAI,GAAG,IAAIT,IAAJ,EAAb;AACAE,QAAAA,gBAAgB,CACd,IAAIF,IAAJ,CAASS,IAAI,CAACC,UAAL,CAAgBD,IAAI,CAACE,UAAL,KAAoB,CAApC,CAAT,CADc,CAAhB;AAGD,OALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAWA;AAAA,gBACGnB,aAAa,CAACE,GAAd,CAAkBC,EAAE,iBAAI;AAEvB,QAAA,KAAK,EAAEA,EAFgB;AAAA,kBAGnBA;AAHmB,SAClBA,EADkB;AAAA;AAAA;AAAA;AAAA,cAAxB;AADH;AAAA;AAAA;AAAA;AAAA,YAXA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvCD;;GAAOE,G;;KAAAA,G;AAyCP,eAAeA,GAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport './App.css';\n\nconst alramTicksArr = [...new Array(60)].map((it, index) => index + 1);\n\nconst  App = () => {\n  const [currDateTime, setCurrDateTime] = useState(new Date());\n  const [alramDateTime, setAlramDateTime] = useState();\n\n  useEffect(() => {\n    const TimerId = setInterval(() => {\n      setCurrDateTime(new Date());\n      if (alramDateTime && currDateTime === alramDateTime) {\n        console.log('tick tick');\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(TimerId)\n    }\n  },[currDateTime, alramDateTime]);\n\n  return (\n    <div className=\"App\">\n      {currDateTime.toLocaleTimeString()}\n      {alramDateTime && alramDateTime.toLocaleTimeString()}\n      <button onClick={()=>{\n        const date = new Date();\n        setAlramDateTime(\n          new Date(date.setMinutes(date.getMinutes() + 2))\n        );\n      }}>\n      SetAlram\n    </button>\n    <select>\n      {alramTicksArr.map(it=> (<option \n        key={it} \n        value={it}> \n           {it}\n        </option>)\n      )}\n    </select>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}